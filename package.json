{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "author": "Ryan Baxley",
  "license": "ISC",
  "dependencies": {
    "aws-serverless-express": "^3.0.1",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.17.1",
    "cookie-parser": "^1.4.3",
    "dynamoose": "^0.7.0",
    "express": "^4.15.2",
    "morgan": "^1.8.1"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-http": "^3.0.0",
    "cross-env": "^5.0.0",
    "eslint": "^3.19.0",
    "mocha": "^3.3.0",
    "ncp": "^2.0.0",
    "replace": "^0.3.0",
    "rimraf": "^2.6.1",
    "webpack": "^2.6.1"
  },
  "config": {
    "s3BucketName": "budgethero",
    "region": "us-east-1",
    "cloudFormationStackName": "AwsServerlessExpressStack",
    "functionName": "budgetHeroApi",
    "accountId": "013571453046"
  },
  "scripts": {
    "start": "cross-env NODE_ENV=dev&&node ./src/app.local.js",
    "build": "node ./scripts/build.js",
    "config": "node ./scripts/configure.js",
    "deconfig": "node ./scripts/deconfigure.js",
    "local": "node scripts/local",
    "invoke-lambda": "aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "create-bucket": "aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket $npm_package_config_s3BucketName --output-template packaged-sam.yaml --region $npm_package_config_region",
    "deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --region $npm_package_config_region",
    "build-package-deploy": "npm run build && npm run package && npm run deploy",
    "delete-stack": "aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "setup": "npm install && (aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy",
    "test": "cross-env NODE_ENV=test&&mocha -t 10000 test",
    "win-config": "npm run config",
    "win-deconfig": "npm run deconfig",
    "win-local": "npm run local",
    "win-invoke-lambda": "aws lambda invoke --function-name %npm_package_config_functionName% --region %npm_package_config_region% --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "win-create-bucket": "aws s3 mb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-delete-bucket": "aws s3 rb s3://%npm_package_config_s3BucketName% --region %npm_package_config_region%",
    "win-package": "aws cloudformation package --template ./cloudformation.yaml --s3-bucket %npm_package_config_s3BucketName% --output-template packaged-sam.yaml --region %npm_package_config_region%",
    "win-deploy": "aws cloudformation deploy --template-file packaged-sam.yaml --stack-name %npm_package_config_cloudFormationStackName% --capabilities CAPABILITY_IAM --region %npm_package_config_region%",
    "win-build--package-deploy": "npm run build && npm run win-package && npm run win-deploy",
    "win-delete-stack": "aws cloudformation delete-stack --stack-name %npm_package_config_cloudFormationStackName% --region %npm_package_config_region%",
    "win-setup": "npm install && (aws s3api get-bucket-location --bucket %npm_package_config_s3BucketName% --region %npm_package_config_region% || npm run win-create-bucket) && npm run win-package-deploy"
  }
}
